// Copyright (C) 2018-2020 Hegemonie's AUTHORS
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

syntax = "proto3";

package hegemonie.region.proto;

service Map {
    rpc Vertices(ListVerticesReq) returns (ListOfVertices) {}

    rpc Edges(ListEdgesReq) returns (ListOfEdges) {}

    rpc Cities (CitiesReq) returns (ListOfCities) {}
}

service City {
    // Returns a list of cities owned by the given character
    rpc List (ListReq) returns (ListOfCities) {}

    // Returns a view of the City
    // Be careful, the request might fail because of a too large object.
    rpc Show (CityId) returns (CityView) {}

    rpc Study (StudyReq) returns (None) {}

    rpc Build (BuildReq) returns (None) {}

    rpc Train (TrainReq) returns (None) {}

    // Create an army around a set of units.
    // The set of units must not be empty and all the units must stay in the given City.
    rpc CreateArmy (CreateArmyReq) returns (None) {}

    rpc CreateTransport (CreateTransportReq) returns (None) {}

    // Transfer a Unit from the given City to the given Army.
    // The City must control the Army and the Unit must be in the City.
    rpc TransferUnit (TransferUnitReq) returns (None) {}

    // Transfer a pile of Resources from the given City to the given Army.
    // The City must control the Army and the Stock must hold the amount of Resources.
    rpc TransferResources (TransferResourcesReq) returns (None) {}

    // Return the list of armies that can be controlled by the given City
    rpc ListArmies (CityId) returns (ListOfNamedItems) {}
}

service Definitions {
    rpc ListUnits (PaginatedQuery) returns (ListOfUnitTypes) {}

    rpc ListBuildings (PaginatedQuery) returns (ListOfBuildingTypes) {}

    rpc ListKnowledges (PaginatedQuery) returns (ListOfKnowledgeTypes) {}
}

service Admin {
    // Have all the Cities on the Region to produce their resources
    rpc Produce(None) returns (None) {}

    // Make all the armies on the Region to move on step
    rpc Move(None) returns (None) {}

    rpc GetScores(None) returns (ListOfCities) {}
}

service Army {
    // Return a detailed view of the given Army
    rpc Show (ArmyId) returns (ArmyView) {}

    // Make the Army flea the fight it is involved in.
    rpc Flea (ArmyId) returns (None) {}

    // Make the Army flip in the fight it is involved in.
    rpc Flip (ArmyId) returns (None) {}

    // Append the specified command on the list of the Army.
    rpc Command (ArmyCommandReq) returns (None) {}
}

message NamedItem {
    uint64 id = 1;
    string name = 2;
}

message ListOfNamedItems {
    repeated NamedItem items = 1;
}

// Identifies an army managed by the city
message ArmyId {
    uint64 character = 1;
    uint64 city = 2;
    uint64 army = 3;
}

message ArmyView {
    uint64 id = 1;
    string name = 2;
    uint64 location = 3;
    ResourcesAbs stock = 4;
    repeated UnitView units = 5;
    repeated ArmyCommand commands = 6;
}

message ArmyCommand {
    uint64 target = 2;
    uint64 action = 3;
}

message ArmyCommandReq {
    ArmyId id = 1;
    ArmyCommand command = 2;
}

// Identifies a City and Character who is
message CityId {
    uint64 character = 1;
    uint64 city = 2;
}

message ResourcesAbs {
    uint64 r0 = 1;
    uint64 r1 = 2;
    uint64 r2 = 3;
    uint64 r3 = 4;
    uint64 r4 = 5;
    uint64 r5 = 6;
}

message ResourcesPlus {
    int64 r0 = 1;
    int64 r1 = 2;
    int64 r2 = 3;
    int64 r3 = 4;
    int64 r4 = 5;
    int64 r5 = 6;
}

message ResourcesMult {
    double r0 = 1;
    double r1 = 2;
    double r2 = 3;
    double r3 = 4;
    double r4 = 5;
    double r5 = 6;
}

message ResourcesMod {
    ResourcesPlus plus = 1;
    ResourcesMult mult = 2;
}

message UnitTypeView {
    uint64 id = 1;
    string name = 2;
    uint32 ticks = 3;
    uint32 health = 4;
}

message BuildingTypeView {
    uint64 id = 1;
    string name = 2;
    uint32 ticks = 3;
}

message KnowledgeTypeView {
    uint64 id = 1;
    string name = 2;
    uint32 ticks = 3;
}

message UnitView {
    UnitTypeView type = 1;
    uint64 id = 2;
    uint64 idType = 3;
    uint32 ticks = 4;
    uint32 health = 5;
    string name = 6;
}

message BuildingView {
    BuildingTypeView type = 1;
    uint64 id = 2;
    uint64 idType = 3;
    uint32 ticks = 4;
    string name = 5;
}

message KnowledgeView {
    KnowledgeTypeView type = 1;
    uint64 id = 2;
    uint64 idType = 3;
    uint32 ticks = 4;
    string name = 5;
}

message StockView {
    ResourcesAbs base = 1;
    ResourcesMod knowledge = 2;
    ResourcesMod buildings = 3;
    ResourcesMod troops = 4;
    ResourcesAbs actual = 5;

    ResourcesAbs usage = 6;
}

message ProductionView {
    ResourcesAbs base = 1;
    ResourcesMod knowledge = 2;
    ResourcesMod buildings = 3;
    ResourcesMod troops = 4;
    ResourcesAbs actual = 5;
}

message CityEvolution {
    repeated KnowledgeTypeView kFrontier = 1;
    repeated BuildingTypeView bFrontier = 2;
    repeated UnitTypeView uFrontier = 3;
}

message CityAssets {
    repeated UnitView units = 1;
    repeated BuildingView buildings = 2;
    repeated KnowledgeView knowledges = 3;
    repeated ArmyView armies = 4;
}

message CityPolitics {
    uint64 overlord = 1;
    repeated uint64 lieges = 2;
}

message CityView {
    uint64 id = 1;
    string name = 2;
    uint64 owner = 3;
    uint64 deputy = 4;
    uint64 location = 5;

    int32 chaotic = 6;
    int32 alignment = 7;
    uint32 cult = 8;
    uint32 ethnicGroup = 9;
    uint32 politicalGroup = 10;

    int64 popularity = 11;

    uint32 tickMassacres = 12;
    bool auto = 13;
    bool deleted = 14;

    CityPolitics politics = 15;

    // The resources owned by the City
    StockView stock = 16;
    ProductionView production = 17;

    // All the things owned by the current city
    CityAssets assets = 18;

    // All the things that the current may start to own
    CityEvolution evol = 19;
}

message StudyReq {
    uint64 character = 1;
    uint64 city = 2;
    uint64 knowledgeType = 3;
}

message TrainReq {
    uint64 character = 1;
    uint64 city = 2;
    uint64 unitType = 3;
}

message BuildReq {
    uint64 character = 1;
    uint64 city = 2;
    uint64 buildingType = 3;
}

message CreateTransportReq {
    uint64 character = 1;
    uint64 city = 2;
    string name = 3;
    ResourcesAbs stock = 4;
}

message CreateArmyReq {
    uint64 character = 1;
    uint64 city = 2;
    string name = 3;
    repeated uint64 unit = 4;
}

message TransferUnitReq {
    uint64 character = 1;
    uint64 city = 2;
    uint64 army = 3;
    repeated uint64 unit = 4;
}

message TransferResourcesReq {
    uint64 character = 1;
    uint64 city = 2;
    uint64 army = 3;
    ResourcesAbs stock = 4;
}

message CitiesReq {
    uint64 marker = 1;
}

message ListReq {
    uint64 character = 1;
}

message ListSetReq {
    repeated uint64 characters = 1;
}

message None {}

message PaginatedQuery {
    uint64 marker = 1;
    uint32 max = 2;
}

message ListOfUnitTypes {
    repeated UnitTypeView items = 1;
}

message ListOfBuildingTypes {
    repeated BuildingTypeView items = 1;
}

message ListOfKnowledgeTypes {
    repeated KnowledgeTypeView items = 1;
}

message ListVerticesReq {
    uint64 marker = 1;
}

message ListEdgesReq {
    uint64 markerSrc = 1;
    uint64 markerDst = 2;
}

message ListOfVertices {
    repeated Vertex items = 1;
}

message ListOfEdges {
    repeated Edge items = 1;
}

message ListOfCities {
    repeated PublicCity items = 1;
}

message PublicCity {
    uint64 id = 1;
    string name = 2;
    uint64 location = 3;
    int32 alignment = 4;
    int32 chaos = 5;
    uint32 politics = 6;
    uint32 cult = 7;
    uint32 ethny = 8;
    int64 score = 9;
}

message Vertex {
    uint64 id = 1;
    uint64 x = 2;
    uint64 y = 3;
    uint64 cityId = 4;
}

message Edge {
    uint64 src = 1;
    uint64 dst = 2;
}