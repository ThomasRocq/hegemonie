// Copyright (C) 2018-2020 Hegemonie's AUTHORS
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

syntax = "proto3";

option go_package = "proto";

package hege.aaa;

service Auth {
  // Performs a simple authentication for the User
  rpc Login (LoginReq) returns (LoginRep) {}
}

service User {
  // List all the users in the database
  rpc List (UserListReq) returns (stream UserView) {}

  // Create a user bond to the given email address
  rpc Create (UserCreateReq) returns (UserView) {}

  rpc Delete (UserId) returns (None) {}

  // Return a view of the User
  rpc Show (UserId) returns (UserView) {}

  rpc GetByMail (UserMail) returns (UserView) {}

  // Make the User an admin.
  rpc Promote (UserId) returns (None) {}

  // Remove the admin status from the User.
  rpc Demote (UserId) returns (None) {}

  // Set the "suspended" status on the User
  rpc Suspend (UserId) returns (None) {}

  // Remove the "suspended" status on the User
  rpc Resume (UserId) returns (None) {}

  // List the Characters owned by the given User.
  rpc Characters(UserId) returns (stream CharacterView) {}
}

service Character {
  // Query a page of Characters owned by the given User.
  rpc List (CharacterListReq) returns (stream CharacterView) {}

  rpc Create (CharacterCreateReq) returns (CharacterView) {}

  // Check the given Character can be managed by the given User and return
  // an abstract of the Character information. The user information is also
  // returned to save calls from the main service.
  rpc Show (CharacterId) returns (CharacterView) {}

  rpc Delete (CharacterId) returns (None) {}

  rpc Promote (CharacterId) returns (None) {}

  rpc Demote (CharacterId) returns (None) {}

  rpc Suspend (CharacterId) returns (None) {}

  rpc Resume (CharacterId) returns (None) {}
}

message None {}

message UserId {
  string id = 1;
}

message UserMail {
  string mail = 1;
}

message CharacterId {
  string region = 1;
  string name = 2;
  string user = 3;  // Optional
}

enum UserState {
  UserUnknown = 0;
  UserInvited = 1;
  UserActive = 2;
  UserAdmin = 3;
  UserSuspended = 4;
  UserDeleted = 5;
}

enum CharacterState {
  CharacterUnknown = 0;
  CharacterActive = 1;
  CharacterSuper = 2;
  CharacterSuspended = 3;
  CharacterDeleted = 4;
}

message UserView {
  string userId = 1;
  string mail = 2;
  string name = 3;
  UserState state = 4;
}

message CharacterView {
  string userId = 1;
  string charId = 2;
  string name = 3;
  string region = 4;
  CharacterState state = 5;
}

message UserCreateReq {
  string mail = 1;
  bytes pass = 2;
}

message LoginReq {
  string mail = 1;
  bytes pass = 2;
}

message LoginRep {
  string token = 1;
}

message UserListReq {
  string marker = 1;
  uint32 limit = 2;
}

message CharacterListReq {
  string region = 1;
  string marker = 2;
  string user = 3;  // optional
}

message CharacterCreateReq {
  string region = 1;
  string name = 2;
  string user = 3;
}
