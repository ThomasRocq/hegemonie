// Copyright (C) 2018-2020 Hegemonie's AUTHORS
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

syntax = "proto3";

package hegemonie.map.proto;

// 
service Map {
  // Paginated query for the vertices of the graph
  rpc Vertices(ListVerticesReq) returns (ListOfVertices) {}

  // Paginated query for the edges of the graph
  rpc Edges(ListEdgesReq) returns (ListOfEdges) {}

  // Request a path computation on the map
  rpc GetPath(PathRequest) returns (PathReply) {}
}

message ListVerticesReq {
  // Unique name of the map
  string mapName = 1;

  // Largest integer that is smaller than the expected value of the first
  // vertex ID returned. In other words, the subsequent assertion
  // `reply.items[0] > marker` is true as long as there are items returned.
  uint64 marker = 2;

  // Maximum number of items returned. Set to 0 to use the internal limit
  // of the server. A result containing less than `max` items doesn't mean
  // EOF.
  uint32 max = 3;
}

message ListOfVertices {
  // An empty `items` array means EOF.
  repeated Vertex items = 1;
}

message ListEdgesReq {
  // Unique name of the map
  string mapName = 1;

  // Largest integer that is smaller than the expected value of the first
  // vertex ID used as a source in the set returned. In other words, the
  // subsequent assertion is true
  // `reply.items[0].Src > markerSrc && reply.items[0].Dst > markerDst`
  uint64 markerSrc = 2;

  // Largest integer that is smaller than the expected value of the first
  // vertex ID used as a source in the set returned. In other words, the
  // subsequent assertion is true
  // `reply.items[0].Src > markerSrc && reply.items[0].Dst > markerDst`
  uint64 markerDst = 3;

  // Maximum number of items returned. Set to 0 to use the internal limit
  // of the server. A result containing less than `max` items doesn't mean
  // EOF.
  uint32 max = 4;
}

message ListOfEdges {
  // An empty `items` array means EOF.
  repeated Edge items = 1;
}

message Vertex {
  uint64 id = 1;
  uint64 x = 2;
  uint64 y = 3;
}

message Edge {
  uint64 src = 1;
  uint64 dst = 2;
}

message PathRequest {
  // Unique name of the map
  string mapName = 1;

  // Source of the path (Vertex ID)
  uint64 src = 2;

  // Target of the path (Vertex ID)
  uint64 dst = 3;

  // How many max hops are expected
  uint32 max = 4;
}

message PathReply {
  // An empty `steps` array means there is no path.
  repeated uint64 steps = 1;
}

